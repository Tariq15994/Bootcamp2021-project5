"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todo.id,
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW",
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] +=
                prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    console.log("params: ", params);
    try {
        await docClient.update(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.default = updateTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVRvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBV3BELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUNqQyxJQUFJLE1BQU0sR0FBVztRQUNuQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtTQUNaO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDO2dCQUN4QixNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ2hELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7S0FDRjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLElBQUk7UUFDRixNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoXCJhd3Mtc2RrXCIpO1xuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuXG50eXBlIFBhcmFtcyA9IHtcbiAgVGFibGVOYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIEtleTogc3RyaW5nIHwge307XG4gIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IGFueTtcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiBhbnk7XG4gIFVwZGF0ZUV4cHJlc3Npb246IHN0cmluZztcbiAgUmV0dXJuVmFsdWVzOiBzdHJpbmc7XG59O1xuXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVUb2RvKHRvZG86IGFueSkge1xuICBsZXQgcGFyYW1zOiBQYXJhbXMgPSB7XG4gICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5UT0RPU19UQUJMRSxcbiAgICBLZXk6IHtcbiAgICAgIGlkOiB0b2RvLmlkLFxuICAgIH0sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXG4gICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7fSxcbiAgICBVcGRhdGVFeHByZXNzaW9uOiBcIlwiLFxuICAgIFJldHVyblZhbHVlczogXCJVUERBVEVEX05FV1wiLFxuICB9O1xuICBsZXQgcHJlZml4ID0gXCJzZXQgXCI7XG4gIGxldCBhdHRyaWJ1dGVzID0gT2JqZWN0LmtleXModG9kbyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuICAgIGlmIChhdHRyaWJ1dGUgIT09IFwiaWRcIikge1xuICAgICAgcGFyYW1zW1wiVXBkYXRlRXhwcmVzc2lvblwiXSArPVxuICAgICAgICBwcmVmaXggKyBcIiNcIiArIGF0dHJpYnV0ZSArIFwiID0gOlwiICsgYXR0cmlidXRlO1xuICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiXVtcIjpcIiArIGF0dHJpYnV0ZV0gPSB0b2RvW2F0dHJpYnV0ZV07XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlTmFtZXNcIl1bXCIjXCIgKyBhdHRyaWJ1dGVdID0gYXR0cmlidXRlO1xuICAgICAgcHJlZml4ID0gXCIsIFwiO1xuICAgIH1cbiAgfVxuICBjb25zb2xlLmxvZyhcInBhcmFtczogXCIsIHBhcmFtcyk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZG9jQ2xpZW50LnVwZGF0ZShwYXJhbXMpLnByb21pc2UoKTtcbiAgICByZXR1cm4gdG9kbztcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiBlcnJvcjogXCIsIGVycik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlVG9kbztcbiJdfQ==