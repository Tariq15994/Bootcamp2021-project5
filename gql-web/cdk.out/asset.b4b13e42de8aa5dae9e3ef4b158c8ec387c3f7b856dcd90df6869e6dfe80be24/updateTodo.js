"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require("aws-sdk");
const docClient = new AWS.DynamoDB.DocumentClient();
async function updateTodo(todo) {
    let params = {
        TableName: process.env.TODOS_TABLE,
        Key: {
            id: todo.id,
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW",
    };
    let prefix = "set ";
    let attributes = Object.keys(todo);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] +=
                prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = todo[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    console.log("params: ", params);
    try {
        await docClient.update(params).promise();
        return todo;
    }
    catch (err) {
        console.log("DynamoDB error: ", err);
        return null;
    }
}
exports.default = updateTodo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlVG9kby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVRvZG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBV3BELEtBQUssVUFBVSxVQUFVLENBQUMsSUFBUztJQUNqQyxJQUFJLE1BQU0sR0FBVztRQUNuQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQ2xDLEdBQUcsRUFBRTtZQUNILEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRTtTQUNaO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLGFBQWE7S0FDNUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25DLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzFDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDO2dCQUN4QixNQUFNLEdBQUcsR0FBRyxHQUFHLFNBQVMsR0FBRyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ2hELE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQ2Y7S0FDRjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLElBQUk7UUFDRixNQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDekMsT0FBTyxJQUFJLENBQUM7S0FDYjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQyxPQUFPLElBQUksQ0FBQztLQUNiO0FBQ0gsQ0FBQztBQUVELGtCQUFlLFVBQVUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByZWZpeCB9IGZyb20gXCJhd3MtY2RrL2xpYi9sb2dnaW5nXCI7XG5pbXBvcnQgeyBBbnlMZW5ndGhTdHJpbmcgfSBmcm9tIFwiYXdzLXNkay9jbGllbnRzL2NvbXByZWhlbmRcIjtcblxuY29uc3QgQVdTID0gcmVxdWlyZShcImF3cy1zZGtcIik7XG5jb25zdCBkb2NDbGllbnQgPSBuZXcgQVdTLkR5bmFtb0RCLkRvY3VtZW50Q2xpZW50KCk7XG5cbnR5cGUgUGFyYW1zID0ge1xuICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgS2V5OiBzdHJpbmcgfCB7fTtcbiAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogYW55O1xuICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueTtcbiAgVXBkYXRlRXhwcmVzc2lvbjogc3RyaW5nO1xuICBSZXR1cm5WYWx1ZXM6IHN0cmluZztcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRvZG8odG9kbzogYW55KSB7XG4gIGxldCBwYXJhbXM6IFBhcmFtcyA9IHtcbiAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlRPRE9TX1RBQkxFLFxuICAgIEtleToge1xuICAgICAgaWQ6IHRvZG8uaWQsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7fSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHt9LFxuICAgIFVwZGF0ZUV4cHJlc3Npb246IFwiXCIsXG4gICAgUmV0dXJuVmFsdWVzOiBcIlVQREFURURfTkVXXCIsXG4gIH07XG4gIGxldCBwcmVmaXggPSBcInNldCBcIjtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyh0b2RvKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XG4gICAgICBwYXJhbXNbXCJVcGRhdGVFeHByZXNzaW9uXCJdICs9XG4gICAgICAgIHByZWZpeCArIFwiI1wiICsgYXR0cmlidXRlICsgXCIgPSA6XCIgKyBhdHRyaWJ1dGU7XG4gICAgICBwYXJhbXNbXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCJdW1wiOlwiICsgYXR0cmlidXRlXSA9IHRvZG9bYXR0cmlidXRlXTtcbiAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIGF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGU7XG4gICAgICBwcmVmaXggPSBcIiwgXCI7XG4gICAgfVxuICB9XG4gIGNvbnNvbGUubG9nKFwicGFyYW1zOiBcIiwgcGFyYW1zKTtcbiAgdHJ5IHtcbiAgICBhd2FpdCBkb2NDbGllbnQudXBkYXRlKHBhcmFtcykucHJvbWlzZSgpO1xuICAgIHJldHVybiB0b2RvO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmxvZyhcIkR5bmFtb0RCIGVycm9yOiBcIiwgZXJyKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB1cGRhdGVUb2RvO1xuIl19