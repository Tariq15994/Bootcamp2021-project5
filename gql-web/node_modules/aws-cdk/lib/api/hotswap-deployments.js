"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryHotswapDeployment = void 0;
const cfn_diff = require("@aws-cdk/cloudformation-diff");
const aws_auth_1 = require("./aws-auth");
const common_1 = require("./hotswap/common");
const evaluate_cloudformation_template_1 = require("./hotswap/evaluate-cloudformation-template");
const lambda_functions_1 = require("./hotswap/lambda-functions");
/**
 * Perform a hotswap deployment,
 * short-circuiting CloudFormation if possible.
 * If it's not possible to short-circuit the deployment
 * (because the CDK Stack contains changes that cannot be deployed without CloudFormation),
 * returns `undefined`.
 */
async function tryHotswapDeployment(sdkProvider, assetParams, cloudFormationStack, stackArtifact) {
    // resolve the environment, so we can substitute things like AWS::Region in CFN expressions
    const resolvedEnv = await sdkProvider.resolveEnvironment(stackArtifact.environment);
    // create a new SDK using the CLI credentials, because the default one will not work for new-style synthesis -
    // it assumes the bootstrap deploy Role, which doesn't have permissions to update Lambda functions
    const sdk = await sdkProvider.forEnvironment(resolvedEnv, aws_auth_1.Mode.ForWriting);
    // The current resources of the Stack.
    // We need them to figure out the physical name of a resource in case it wasn't specified by the user.
    // We fetch it lazily, to save a service call, in case all hotswapped resources have their physical names set.
    const listStackResources = new LazyListStackResources(sdk, stackArtifact.stackName);
    const evaluateCfnTemplate = new evaluate_cloudformation_template_1.EvaluateCloudFormationTemplate({
        stackArtifact,
        parameters: assetParams,
        account: resolvedEnv.account,
        region: resolvedEnv.region,
        // ToDo make this better:
        partition: 'aws',
        // ToDo make this better:
        urlSuffix: 'amazonaws.com',
        listStackResources,
    });
    const currentTemplate = await cloudFormationStack.template();
    const stackChanges = cfn_diff.diffTemplate(currentTemplate, stackArtifact.template);
    const hotswappableChanges = await findAllHotswappableChanges(stackChanges, evaluateCfnTemplate);
    if (!hotswappableChanges) {
        // this means there were changes to the template that cannot be short-circuited
        return undefined;
    }
    // apply the short-circuitable changes
    await applyAllHotswappableChanges(sdk, hotswappableChanges);
    return { noOp: hotswappableChanges.length === 0, stackArn: cloudFormationStack.stackId, outputs: cloudFormationStack.outputs, stackArtifact };
}
exports.tryHotswapDeployment = tryHotswapDeployment;
async function findAllHotswappableChanges(stackChanges, evaluateCfnTemplate) {
    const promises = new Array();
    stackChanges.resources.forEachDifference(async (logicalId, change) => {
        promises.push(lambda_functions_1.isHotswappableLambdaFunctionChange(logicalId, change, evaluateCfnTemplate));
    });
    return Promise.all(promises).then(hotswapDetectionResults => {
        const hotswappableResources = new Array();
        let foundNonHotswappableChange = false;
        for (const lambdaFunctionShortCircuitChange of hotswapDetectionResults) {
            if (lambdaFunctionShortCircuitChange === common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT) {
                foundNonHotswappableChange = true;
            }
            else if (lambdaFunctionShortCircuitChange === common_1.ChangeHotswapImpact.IRRELEVANT) {
                // empty 'if' just for flow-aware typing to kick in...
            }
            else {
                hotswappableResources.push(lambdaFunctionShortCircuitChange);
            }
        }
        return foundNonHotswappableChange ? undefined : hotswappableResources;
    });
}
async function applyAllHotswappableChanges(sdk, hotswappableChanges) {
    return Promise.all(hotswappableChanges.map(hotswapOperation => {
        return hotswapOperation.apply(sdk);
    }));
}
class LazyListStackResources {
    constructor(sdk, stackName) {
        this.sdk = sdk;
        this.stackName = stackName;
    }
    async listStackResources() {
        if (this.stackResources === undefined) {
            this.stackResources = await this.getStackResources();
        }
        return this.stackResources;
    }
    async getStackResources() {
        var _a;
        const ret = new Array();
        let nextToken;
        do {
            const stackResourcesResponse = await this.sdk.cloudFormation().listStackResources({
                StackName: this.stackName,
                NextToken: nextToken,
            }).promise();
            ret.push(...((_a = stackResourcesResponse.StackResourceSummaries) !== null && _a !== void 0 ? _a : []));
            nextToken = stackResourcesResponse.NextToken;
        } while (nextToken);
        return ret;
    }
}
//# sourceMappingURL=data:application/json;base64,