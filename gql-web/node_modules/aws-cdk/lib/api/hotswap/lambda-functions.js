"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHotswappableLambdaFunctionChange = void 0;
const common_1 = require("./common");
const evaluate_cloudformation_template_1 = require("./evaluate-cloudformation-template");
/**
 * Returns `false` if the change cannot be short-circuited,
 * `true` if the change is irrelevant from a short-circuit perspective
 * (like a change to CDKMetadata),
 * or a LambdaFunctionResource if the change can be short-circuited.
 */
async function isHotswappableLambdaFunctionChange(logicalId, change, evaluateCfnTemplate) {
    const lambdaCodeChange = await isLambdaFunctionCodeOnlyChange(change, evaluateCfnTemplate);
    if (typeof lambdaCodeChange === 'string') {
        return lambdaCodeChange;
    }
    else {
        // verify that the Asset changed - otherwise,
        // it's a Code property-only change,
        // but not to an asset change
        // (for example, going from Code.fromAsset() to Code.fromInline())
        if (!common_1.assetMetadataChanged(change)) {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
        const functionName = await establishFunctionPhysicalName(logicalId, change, evaluateCfnTemplate);
        if (!functionName) {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
        return new LambdaFunctionHotswapOperation({
            physicalName: functionName,
            code: lambdaCodeChange,
        });
    }
}
exports.isHotswappableLambdaFunctionChange = isHotswappableLambdaFunctionChange;
/**
 * Returns `true` if the change is not for a AWS::Lambda::Function,
 * but doesn't prevent short-circuiting
 * (like a change to CDKMetadata resource),
 * `false` if the change is to a AWS::Lambda::Function,
 * but not only to its Code property,
 * or a LambdaFunctionCode if the change is to a AWS::Lambda::Function,
 * and only affects its Code property.
 */
async function isLambdaFunctionCodeOnlyChange(change, evaluateCfnTemplate) {
    var _a;
    if (!change.newValue) {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    const newResourceType = change.newValue.Type;
    // Ignore Metadata changes
    if (newResourceType === 'AWS::CDK::Metadata') {
        return common_1.ChangeHotswapImpact.IRRELEVANT;
    }
    // The only other resource change we should see is a Lambda function
    if (newResourceType !== 'AWS::Lambda::Function') {
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    if (((_a = change.oldValue) === null || _a === void 0 ? void 0 : _a.Type) == null) {
        // this means this is a brand-new Lambda function -
        // obviously, we can't short-circuit that!
        return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
    }
    /*
     * On first glance, we would want to initialize these using the "previous" values (change.oldValue),
     * in case only one of them changed, like the key, and the Bucket stayed the same.
     * However, that actually fails for old-style synthesis, which uses CFN Parameters!
     * Because the names of the Parameters depend on the hash of the Asset,
     * the Parameters used for the "old" values no longer exist in `assetParams` at this point,
     * which means we don't have the correct values available to evaluate the CFN expression with.
     * Fortunately, the diff will always include both the s3Bucket and s3Key parts of the Lambda's Code property,
     * even if only one of them was actually changed,
     * which means we don't need the "old" values at all, and we can safely initialize these with just `''`.
     */
    let s3Bucket = '', s3Key = '';
    let foundCodeDifference = false;
    // Make sure only the code in the Lambda function changed
    const propertyUpdates = change.propertyUpdates;
    for (const updatedPropName in propertyUpdates) {
        const updatedProp = propertyUpdates[updatedPropName];
        if (updatedProp.newValue === undefined) {
            return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
        }
        for (const newPropName in updatedProp.newValue) {
            switch (newPropName) {
                case 'S3Bucket':
                    foundCodeDifference = true;
                    s3Bucket = await evaluateCfnTemplate.evaluateCfnExpression(updatedProp.newValue[newPropName]);
                    break;
                case 'S3Key':
                    foundCodeDifference = true;
                    s3Key = await evaluateCfnTemplate.evaluateCfnExpression(updatedProp.newValue[newPropName]);
                    break;
                default:
                    return common_1.ChangeHotswapImpact.REQUIRES_FULL_DEPLOYMENT;
            }
        }
    }
    return foundCodeDifference
        ? {
            s3Bucket,
            s3Key,
        }
        : common_1.ChangeHotswapImpact.IRRELEVANT;
}
class LambdaFunctionHotswapOperation {
    constructor(lambdaFunctionResource) {
        this.lambdaFunctionResource = lambdaFunctionResource;
    }
    async apply(sdk) {
        return sdk.lambda().updateFunctionCode({
            FunctionName: this.lambdaFunctionResource.physicalName,
            S3Bucket: this.lambdaFunctionResource.code.s3Bucket,
            S3Key: this.lambdaFunctionResource.code.s3Key,
        }).promise();
    }
}
async function establishFunctionPhysicalName(logicalId, change, evaluateCfnTemplate) {
    var _a, _b;
    const functionNameInCfnTemplate = (_b = (_a = change.newValue) === null || _a === void 0 ? void 0 : _a.Properties) === null || _b === void 0 ? void 0 : _b.FunctionName;
    if (functionNameInCfnTemplate != null) {
        try {
            return await evaluateCfnTemplate.evaluateCfnExpression(functionNameInCfnTemplate);
        }
        catch (e) {
            // If we can't evaluate the function's name CloudFormation expression,
            // just look it up in the currently deployed Stack
            if (!(e instanceof evaluate_cloudformation_template_1.CfnEvaluationException)) {
                throw e;
            }
        }
    }
    return evaluateCfnTemplate.findPhysicalNameFor(logicalId);
}
//# sourceMappingURL=data:application/json;base64,